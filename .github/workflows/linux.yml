name: Deploy and Run Tests on GCP VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          fs: [ 'btrfs', 'xfs' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup GCP environment
        uses: google-github-actions/setup-gcloud@v1

      - name: Generate random instance and disk name
        run: |
          INSTANCE_UUID=$(uuidgen | cut -d '-' -f1)
          INSTANCE_NAME="vm-$INSTANCE_UUID"
          DISK_NAME="$INSTANCE_NAME-disk"
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
          echo "DISK_NAME=$DISK_NAME" >> $GITHUB_ENV

      - name: Set default project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Generate SSH key pair
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""

      - name: Set SSH public key
        run: |
          echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)" >> $GITHUB_ENV

      - name: Create GCP VM with Spot provisioning
        run: |
          gcloud compute instances create $INSTANCE_NAME \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --zone=us-central1-a \
          --machine-type=e2-small \
          --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
          --no-restart-on-failure \
          --maintenance-policy=TERMINATE \
          --provisioning-model=SPOT \
          --instance-termination-action=DELETE \
          --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
          --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
          --create-disk=auto-delete=yes,boot=yes,device-name=$INSTANCE_NAME,image=projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20230918,mode=rw,size=10,type=projects/${{ secrets.GCP_PROJECT_ID }}/zones/us-central1-a/diskTypes/pd-balanced \
          --create-disk=size=10GB,device-name=$DISK_NAME,mode=rw,type=projects/${{ secrets.GCP_PROJECT_ID }}/zones/us-central1-a/diskTypes/pd-balanced \
          --no-shielded-secure-boot \
          --shielded-vtpm \
          --shielded-integrity-monitoring \
          --reservation-affinity=any \
          --metadata=ssh-keys="ghaction:${{ env.SSH_PUBLIC_KEY }}"

      - name: Wait for VM to be ready
        run: |
          for i in {1..30}; do
              if gcloud compute ssh $INSTANCE_NAME --command="echo ready" --zone=us-central1-a; then
              break
              else
              echo "Retrying ($i)..."
              sleep 2
              fi
          done

      - name: Run init script
        run: |
          SCRIPT_PATH=scripts/linux-${{ matrix.fs }}.sh
          SCRIPT_CONTENT=$(cat $SCRIPT_PATH)
            gcloud compute ssh $INSTANCE_NAME --zone=us-central1-a \
                --ssh-key-file=~/.ssh/id_rsa \
                --command="echo '$SCRIPT_CONTENT' > init-script.sh && chmod +x init-script.sh && ./init-script.sh"

      - name: Copy Repo to GCP VM
        run: |
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          gcloud compute scp --recurse ../$REPO_NAME ghaction@$INSTANCE_NAME:/mnt/btrfs/code --zone=us-central1-a --ssh-key-file=~/.ssh/id_rsa

      - name: List files on VM
        run: |
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          gcloud compute ssh ghaction@$INSTANCE_NAME --zone=us-central1-a \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="ls -la /mnt/btrfs/code/$REPO_NAME"

      - name: Install Rust
        run: |
          gcloud compute ssh ghaction@$INSTANCE_NAME --zone=us-central1-a \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && source ~/.cargo/env"

      - name: Run Tests as New User
        run: |
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          gcloud compute ssh ghaction@$INSTANCE_NAME --zone=us-central1-a \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="source ~/.cargo/env && cd /mnt/btrfs/code/$REPO_NAME && cargo test"

      # Cleanup
      - name: Delete GCP VM if exists
        if: always()
        run: |
          if gcloud compute instances describe $INSTANCE_NAME --zone=us-central1-a > /dev/null 2>&1; then
            gcloud compute instances delete $INSTANCE_NAME --zone=us-central1-a --quiet
          else
            echo "VM does not exist. Skipping deletion."
          fi

      - name: Delete GCP Disk if exists
        if: always()
        run: |
          if gcloud compute disks describe $DISK_NAME --zone=us-central1-a > /dev/null 2>&1; then
            gcloud compute disks delete $DISK_NAME --zone=us-central1-a --quiet
          else
            echo "Disk does not exist. Skipping deletion."
          fi
