name: E2E Windows (Google Cloud)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  windows-e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fs: ['ReFS']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup GCP environment
        uses: google-github-actions/setup-gcloud@v1

      - name: Generate random instance and disk name
        run: |
          INSTANCE_UUID=$(uuidgen | cut -d'-' -f1)
          INSTANCE_NAME="vm-$INSTANCE_UUID"
          DISK_NAME="$INSTANCE_NAME-disk"
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
          echo "DISK_NAME=$DISK_NAME" >> $GITHUB_ENV

      - name: Set default project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create GCP VM with Spot provisioning
        run: |
          gcloud compute instances create $INSTANCE_NAME \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=us-central1-a \
            --machine-type=e2-small \
            --no-restart-on-failure \
            --maintenance-policy=TERMINATE \
            --provisioning-model=SPOT \
            --instance-termination-action=DELETE \
            --shielded-secure-boot \
            --shielded-vtpm \
            --create-disk=auto-delete=yes,device-name=$INSTANCE_NAME,image=projects/windows-cloud/global/images/windows-server-2022-dc-v20231011,mode=rw,size=50,type=projects/${{ secrets.GCP_PROJECT_ID }}/zones/us-central1-a/diskTypes/pd-balanced \
            --create-disk=size=10GB,device-name=$DISK_NAME,mode=rw,type=projects/${{ secrets.GCP_PROJECT_ID }}/zones/us-central1-a/diskTypes/pd-balanced \
            --metadata sysprep-specialize-script-cmd="googet -noconfirm=true install google-compute-engine-ssh",enable-windows-ssh=TRUE,windows-startup-script-ps1='
              # Prepare Disk
              Write-Host "::group::Prepare Disk"
              $driveLetter = "Z:"
              $volumeLabel = "ReFSVolume"
              $diskNumber = 1
              Initialize-Disk -Number $diskNumber -PartitionStyle GPT
              New-Partition -DiskNumber $diskNumber -UseMaximumSize -AssignDriveLetter | Format-Volume -FileSystem ReFS -NewFileSystemLabel $volumeLabel
              Write-Host "::endgroup::"

              # Create "code" directory in the ReFS volume
              Write-Host "::group::Create code directory"
              New-Item -Path "$driveLetter\code" -ItemType Directory
              Write-Host "::endgroup::"'

      - name: Wait for VM to be ready
        run: |
          for i in {1..30}; do
              if gcloud compute ssh $INSTANCE_NAME --command="echo ready" --zone=us-central1-a; then
              break
              else
              echo "Retrying ($i)..."
              sleep 2
              fi
          done

      - name: Copy the repo
        run: |
            REPO_NAME=$(basename $(git rev-parse --show-toplevel))
            gcloud compute scp --recurse --zone=us-central1-a ../$REPO_NAME $INSTANCE_NAME:Z:/code/
    
      - name: Run tests
        run: |
            gcloud compute ssh $INSTANCE_NAME --zone=us-central1-a --command="cd Z:/code/$REPO_NAME && cargo test"
      
      # Cleanup
      - name: Delete GCP VM if exists
        if: always()
        run: |
          if gcloud compute instances describe $INSTANCE_NAME --zone=us-central1-a > /dev/null 2>&1; then
            gcloud compute instances delete $INSTANCE_NAME --zone=us-central1-a --quiet
          else
            echo "VM does not exist. Skipping deletion."
          fi

      - name: Delete GCP Disk if exists
        if: always()
        run: |
          if gcloud compute disks describe $DISK_NAME --zone=us-central1-a > /dev/null 2>&1; then
            gcloud compute disks delete $DISK_NAME --zone=us-central1-a --quiet
          else
            echo "Disk does not exist. Skipping deletion."
          fi